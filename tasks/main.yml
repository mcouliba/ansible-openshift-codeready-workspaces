---
- name: check if {{ project_name }} project exists
  command: "oc get project {{ project_name }}"
  register: project_result
  ignore_errors: true
  changed_when: false

- name: create {{ project_name }} project
  command: >
      oc new-project {{ project_name }}
      --display-name='{{ project_display_name }}'
      --description='{{ project_desc }}'
  when: project_result is failed

- name: Change Project
  command: "oc project {{ project_name }}"
  changed_when: true

- name: delete {{ project_name }} project quota
  command: "oc delete limitrange --all"
  register: res_cmd
  changed_when: res_cmd.rc == 0

- name: get Openshift Token
  command: "oc whoami -t"
  register: openshift_token
  changed_when: true

- name: get Openshift API URL
  command: "oc whoami --show-server"
  register: cmd_result
  changed_when: true

- name: init 'openshift_api_uri' variable
  set_fact:
    openshift_api_uri: "{{ cmd_result.stdout }}"

- name: create service acccount for the operator
  command: "oc create sa {{ operator_service_account_name }}"
  register: res_cmd
  changed_when: res_cmd.rc == 0

- name: grant admin role to the service acccount
  command: >
      oc create rolebinding {{ operator_service_account_name }} 
      --clusterrole=admin 
      --serviceaccount={{ project_name }}:{{ operator_service_account_name }}
  register: res_cmd
  changed_when: res_cmd.rc == 0

# - name: enable Openshift oAuth
#   include_tasks: oauth.yml
#   when: enable_openshift_oauth

# - name: enable self-signed certificate 
#   include_tasks: self-signed-cert.yml
#   when: use_self_signed_cert

- name: deploy CodeReady Workspaces
  include_tasks: deploy-crw.yml
  vars:
    oc_token: "{{ openshift_token.stdout }}"
    codeready_config_content: "{{ lookup('template', 'crw-config.json.j2', convert_data=False) }}"

- name: get CodeReady Workspaces URL
  command: "oc get routes codeready --template={% raw %}'{{ .spec.host }}'{% endraw %}"
  register: cmd_result
  changed_when: true

- name: init 'codeready_url' variable
  set_fact:
    codeready_url: "{{ cmd_result.stdout }}"

- name: get RHSSO URL
  command: "oc get routes keycloak --template={% raw %}'{{ .spec.host }}'{% endraw %}"
  register: cmd_result
  changed_when: true

- name: init 'rhsso_url' variable
  set_fact:
    rhsso_url: "{{ cmd_result.stdout }}"

- name: wait for CodeReady Workspaces to be running
  uri:
    url: "http://{{ codeready_url }}/api/system/state"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 30

- name: get auth token from RHSSO CodeReady realm
  uri:
    url: http://{{ rhsso_url }}/auth/realms/codeready/protocol/openid-connect/token
    method: POST
    body: "username=admin&password=admin&grant_type=password&client_id=admin-cli"
    status_code: 200
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  register: codeready_access_token_result

- name: init 'codeready_access_token_bearer' variable
  set_fact:
    codeready_access_token_bearer: "{{ codeready_access_token_result.json | json_query('access_token') }}"

- name: add Cloud Native Stack
  include_tasks: add-stack.yml
  vars:
    stack_json: "{{ lookup('file','cloud-native-stack.json', convert_data=False) }}"
